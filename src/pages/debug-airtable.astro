---
// src/pages/debug-airtable.astro
// Esta página te ayudará a diagnosticar problemas con Airtable
import Airtable from 'airtable';

// Variables de entorno para diagnóstico
const apiKey = import.meta.env.AIRTABLE_API_KEY;
const baseId = import.meta.env.AIRTABLE_BASE_ID;
const tableId = import.meta.env.AIRTABLE_BLOG_TABLE_ID;

// Status de variables de entorno
const envStatus = {
  apiKey: !!apiKey,
  baseId: !!baseId,
  tableId: !!tableId,
  allPresent: !!apiKey && !!baseId && !!tableId
};

// Intentar obtener datos de Airtable
let airtableData = { 
  success: false, 
  error: null as string | null, 
  records: [] as any[]
};

// Verificar si las Content Collections están activas
let contentCollections = { 
  available: false, 
  error: null as string | null,
  paths: [] as string[]
};

try {
  // Intenta importar las Content Collections
  const { getCollection } = await import('astro:content');
  try {
    const blogEntries = await getCollection('blog');
    contentCollections.available = true;
    contentCollections.paths = blogEntries.map(entry => `/blog/${entry.slug}`);
  } catch (err: any) {
    contentCollections.error = `Error accediendo a la colección: ${err.message}`;
  }
} catch (err: any) {
  contentCollections.error = `Error importando Content Collections: ${err.message}`;
}

// Obtener datos de Airtable si las variables están disponibles
if (envStatus.allPresent) {
  try {
    const base = new Airtable({ apiKey }).base(baseId);
    const records = await base(tableId).select({
      maxRecords: 5
    }).all();
    
    airtableData.success = true;
    airtableData.records = records.map(record => ({
      id: record.id,
      fields: Object.keys(record.fields),
      slug: record.fields.Slug,
      title: record.fields.Title,
      status: record.fields.Status
    }));
  } catch (err: any) {
    airtableData.error = err.message;
  }
}

// Verificar conflictos potenciales
const potentialConflicts: string[] = [];
if (contentCollections.available && airtableData.success) {
  const airtableSlugs = airtableData.records
    .filter(r => r.slug)
    .map(r => `/blog/${r.slug}`);
  
  potentialConflicts.push(
    ...airtableSlugs.filter(slug => contentCollections.paths.includes(slug))
  );
}
---

<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Diagnóstico Airtable</title>
  <style>
    body { font-family: system-ui, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 2rem; }
    h1 { color: #333; }
    h2 { color: #555; margin-top: 2rem; }
    .card { background: #f9f9f9; border-radius: 8px; padding: 1rem; margin-bottom: 1rem; border: 1px solid #ddd; }
    .success { border-left: 4px solid #4CAF50; }
    .error { border-left: 4px solid #F44336; }
    .warning { border-left: 4px solid #FF9800; }
    code { background: #eee; padding: 0.2rem 0.4rem; border-radius: 4px; font-size: 0.9em; }
    pre { background: #f5f5f5; padding: 1rem; border-radius: 8px; overflow-x: auto; }
  </style>
</head>
<body>
  <h1>Diagnóstico de Integración con Airtable</h1>
  
  <h2>1. Variables de Entorno</h2>
  <div class={`card ${envStatus.allPresent ? 'success' : 'error'}`}>
    <p><strong>Estado de variables:</strong></p>
    <ul>
      <li>AIRTABLE_API_KEY: {envStatus.apiKey ? '✅ Presente' : '❌ Falta'}</li>
      <li>AIRTABLE_BASE_ID: {envStatus.baseId ? '✅ Presente' : '❌ Falta'}</li>
      <li>AIRTABLE_BLOG_TABLE_ID: {envStatus.tableId ? '✅ Presente' : '❌ Falta'}</li>
    </ul>
    {!envStatus.allPresent && 
      <p class="error">⚠️ <strong>Problema detectado:</strong> Faltan una o más variables de entorno. 
      Asegúrate de que están correctamente configuradas en tu archivo <code>.env</code>.</p>
    }
  </div>

  <h2>2. Conexión con Airtable</h2>
  <div class={`card ${airtableData.success ? 'success' : 'error'}`}>
    {airtableData.success ? (
      <>
        <p>✅ <strong>Conexión exitosa a Airtable</strong></p>
        <p>Se encontraron {airtableData.records.length} registros:</p>
        <pre>{JSON.stringify(airtableData.records, null, 2)}</pre>
      </>
    ) : (
      <>
        <p>❌ <strong>Error al conectar con Airtable</strong></p>
        {airtableData.error && <p>Error: {airtableData.error}</p>}
        {!envStatus.allPresent && <p>No se pudo conectar porque faltan variables de entorno.</p>}
      </>
    )}
  </div>

  <h2>3. Content Collections</h2>
  <div class={`card ${!contentCollections.available || contentCollections.paths.length === 0 ? 'success' : 'warning'}`}>
    {contentCollections.available ? (
      <>
        <p>ℹ️ <strong>Content Collections están activas</strong></p>
        <p>Encontradas {contentCollections.paths.length} rutas de blog locales:</p>
        <pre>{JSON.stringify(contentCollections.paths, null, 2)}</pre>
        {contentCollections.paths.length > 0 && (
          <p class="warning">⚠️ <strong>Posible conflicto:</strong> Si quieres usar exclusivamente Airtable, 
          considera desactivar las Content Collections para blog en <code>astro.config.mjs</code>.</p>
        )}
      </>
    ) : (
      <>
        <p>✅ <strong>Content Collections no están disponibles para blog</strong></p>
        {contentCollections.error && <p>Detalles: {contentCollections.error}</p>}
      </>
    )}
  </div>

  <h2>4. Posibles Conflictos de Rutas</h2>
  <div class={`card ${potentialConflicts.length === 0 ? 'success' : 'error'}`}>
    {potentialConflicts.length > 0 ? (
      <>
        <p>⚠️ <strong>Se detectaron posibles conflictos de rutas</strong></p>
        <p>Las siguientes rutas existen tanto en Content Collections como en Airtable:</p>
        <ul>
          {potentialConflicts.map((path) => <li>{path}</li>)}
        </ul>
        <p>Esto podría causar que Astro use las entradas locales en lugar de Airtable.</p>
      </>
    ) : (
      <p>✅ <strong>No se detectaron conflictos de rutas</strong></p>
    )}
  </div>

  <h2>5. Comprobar el sistema de rutas</h2>
  <div class="card">
    <p><strong>Estado del sistema de rutas:</strong></p>
    <p>La página que estás viendo actualmente es <code>/debug-airtable</code>.</p>
    <p>Para probar si las rutas de Airtable están funcionando, intenta visitar una de estas URLs (si Airtable devolvió registros):</p>
    
    {airtableData.success && airtableData.records.length > 0 ? (
      <ul>
        {airtableData.records.filter(r => r.slug).map(record => (
          <li>
            <a href={`/blog/${record.slug}`} target="_blank">
              /blog/{record.slug}
            </a> - {record.title || "Sin título"}
          </li>
        ))}
      </ul>
    ) : (
      <p>No hay rutas de Airtable disponibles para probar.</p>
    )}
  </div>

  <h2>6. Pasos Siguientes</h2>
  <div class="card">
    <p><strong>Recomendaciones:</strong></p>
    <ol>
      <li>Verifica que las variables de entorno estén correctamente configuradas.</li>
      <li>Si usas Content Collections y Airtable al mismo tiempo, asegúrate de que no haya slugs duplicados.</li>
      <li>Considera modificar <code>astro.config.mjs</code> para desactivar las Content Collections de blog si solo quieres usar Airtable.</li>
      <li>Verifica que <code>[slug].astro</code> está correctamente implementado.</li>
      <li>Limpia la caché y reinicia el servidor de desarrollo con <code>npm run dev</code>.</li>
    </ol>
  </div>
</body>
</html>