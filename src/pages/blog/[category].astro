---
// src/pages/blog/category/[category].astro - VERSIÓN SUPABASE CORREGIDA
import Layout from '../../layouts/Layout.astro'; // Ajusta ruta
import BlogPostCard from '../../components/blogSection/BlogPostCard.astro'; // Ajusta ruta
import { supabase } from '../../lib/supabase';
import type { PostFromView } from '../../types'; // Importa tipo

// --- getStaticPaths: Obtiene slugs de categorías con posts publicados ---
export async function getStaticPaths() {
  console.log("--- CATEGORY PAGE: Running getStaticPaths from Supabase ---");
  // Definimos el tipo esperado por Astro para las rutas generadas
  type CategoryPath = { params: { category: string }, props: { categoryName: string } };
  let paths: CategoryPath[] = [];

  if (!supabase) {
    console.error("Supabase client not initialized in [category].astro getStaticPaths.");
    return paths;
  }

  try {
    // Obtenemos nombres y slugs de categorías que tienen al menos un post asociado en la vista
    // (la vista ya filtra por posts publicados)
    const { data: categoriesData, error } = await supabase
      .from('posts_view')
      .select('category_name, category_slug')
      .not('category_slug', 'is', null); // Asegura que tengamos slug de categoría

    if (error) throw error;

    if (categoriesData) {
      // Usamos un Map para obtener categorías únicas (basado en el slug)
      const uniqueCategories = new Map<string, string>(); // Clave: slug, Valor: name
      categoriesData.forEach(cat => {
        if (cat.category_slug && !uniqueCategories.has(cat.category_slug)) {
          // Guardamos el nombre capitalizado (asumiendo que ya lo está en la DB) o el slug como fallback
          uniqueCategories.set(cat.category_slug, cat.category_name || cat.category_slug);
        }
      });

      // Crear las rutas
      uniqueCategories.forEach((name, slug) => {
        paths.push({
          params: { category: slug },   // El slug va en la URL (: category)
          props: { categoryName: name } // Pasamos el nombre como prop a la página
        });
      });
      console.log(`Generated ${paths.length} paths for category pages.`);
    }
  } catch (error: any) {
    console.error("Error fetching categories from Supabase:", error);
    throw error; // Fallar build si hay error
  }
  return paths;
}

// --- Obtener Props y Datos para la Categoría Actual ---
const { categoryName } = Astro.props; // Nombre legible de la categoría (viene de props)
const { category: categorySlug } = Astro.params; // Slug de la categoría (viene de la URL)

let categoryPosts: PostFromView[] = [];
let fetchError: string | null = null;

// Solo intentar buscar posts si tenemos un slug
if (supabase && categorySlug) {
  try {
    console.log(`Fetching posts for category slug: ${categorySlug}`);
    // Obtenemos los posts de esta categoría desde la vista
    const { data, error } = await supabase
      .from('posts_view')
      .select('*')        // Traemos todos los datos del post de la vista
      .eq('category_slug', categorySlug) // Filtramos por el slug de categoría
      .order('published_at', { ascending: false }); // Ordenamos

    if (error) throw error;

    if (data) {
      categoryPosts = data as PostFromView[];
      console.log(`Found ${categoryPosts.length} posts in category "${categoryName}" (slug: ${categorySlug})`);
    }
  } catch (error: any) {
    console.error(`Error fetching posts for category ${categorySlug}:`, error);
    fetchError = `Error fetching posts: ${error.message}`;
  }
} else if (!supabase) {
    fetchError = "Supabase client not initialized.";
} else {
    fetchError = "Category slug not found in params.";
}

// Helper para formatear fechas (igual que antes, usa en-US)
function formatDate(dateString: string | null): string {
    if (!dateString) return 'Unknown Date';
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
}
---

<Layout title={`${categoryName || 'Category'} | AutomationAI Blog`} description={`Explore our articles about ${categoryName || 'this category'} - practical insights, tutorials, and tips from AutomationAI Solutions.`}>

  {/* --- Encabezado de la Página de Categoría --- */}
  <section class="category-hero section-padding bg-soft-gradient text-center">
    <div class="container narrow-container">
      <p class="breadcrumb"><a href="/blog/">Blog</a> / Category</p>
      {/* Usamos el categoryName pasado como prop */}
      <h1 class="page-title">{categoryName || 'Unknown Category'}</h1>
      <p class="page-subtitle">
        Explore our latest articles and insights about {categoryName || 'this category'}.
      </p>
    </div>
  </section>

  {/* --- Mensaje de Error --- */}
  {fetchError && (
    <div class="container section-padding">
      <div class="error-message" style="/* estilos error */">
          <h2>Error Loading Posts</h2>
          <p>{fetchError}</p>
      </div>
    </div>
   )}

  {/* --- Listado de Posts --- */}
  <section class="blog-list-section section-padding">
    <div class="container">
      {!fetchError && categoryPosts.length > 0 ? (
        <div class="posts-grid">
          {categoryPosts.map(post => (
            <BlogPostCard post={post} />
          ))}
        </div>
      ) : !fetchError ? (
        // Mensaje si no hay posts en esta categoría (y no hubo error)
        <div class="no-posts-message">
          <h2>No posts found in this category yet</h2>
          <p>Check back soon or explore other categories.</p>
          <a href="/blog/" class="back-button" style="/* estilos botón */">Back to Blog Index</a>
        </div>
      ) : null } {/* No mostrar nada si hubo error de fetch */}
    </div>
  </section>

</Layout>

<style>
  /* --- Estilos de la página de categoría --- */
  .category-hero {
    background: linear-gradient(180deg, var(--soft-gradient-start, #f8faff) 0%, var(--soft-gradient-end, #ffffff) 100%);
  }
  
  .breadcrumb {
    font-size: 0.9rem;
    margin-bottom: 1rem;
    color: var(--text-light, #6c757d);
  }
  .breadcrumb a {
    color: var(--primary-color, #007bff);
    text-decoration: none;
  }
  .breadcrumb a:hover {
    text-decoration: underline;
  }
  
  .page-title {
    font-size: clamp(2.5rem, 7vw, 3.5rem);
    margin-bottom: 1rem;
    color: var(--text-dark, #1A2B48);
    font-weight: 700;
  }
  
  .page-subtitle {
    font-size: clamp(1.1rem, 3vw, 1.3rem);
    color: var(--text-medium, #4A5568);
    max-width: 650px;
    margin: 0 auto;
    line-height: 1.6;
  }

  /* --- Estilos Listado de Posts --- */
  .blog-list-section {
    background-color: var(--bg-light-gray, #f8f9fa);
  }

  .posts-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2.5rem;
  }

  @media (min-width: 640px) {
    .posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .posts-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
    }
  }

  /* --- Mensaje de No Posts --- */
  .no-posts-message {
    text-align: center;
    padding: 3rem 1rem;
    background-color: var(--white, #ffffff);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 50, 100, 0.05);
  }
  .no-posts-message h2 {
    font-size: 1.8rem;
    color: var(--text-dark, #1A2B48);
    margin-bottom: 1rem;
  }
  .no-posts-message p {
    color: var(--text-medium, #4A5568);
    max-width: 500px;
    margin: 0 auto 1.5rem;
  }
  .back-button {
    display: inline-block;
    background-color: var(--primary-color, #007bff);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.2s;
  }
  .back-button:hover {
    background-color: var(--primary-dark, #0056b3);
  }

  /* --- Tarjetas de Posts (mismo estilo que index.astro) --- */
  .post-card {
    background-color: var(--white, #ffffff);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 50, 100, 0.05);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
  }
  .post-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 60, 120, 0.1);
  }

  .card-image-link { display: block; }
  .card-image {
    display: block;
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-bottom: 1px solid var(--border-color-soft, #e2e8f0);
  }
  .card-image-placeholder {
    height: 10px;
    background-color: var(--primary-color, #007bff);
  }

  .card-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .card-category {
    display: inline-block;
    margin-bottom: 0.75rem;
    font-size: 0.8rem;
    font-weight: 600;
    color: var(--primary-color, #007bff);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    text-decoration: none;
  }
  .card-category:hover { text-decoration: underline; }

  .card-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: var(--text-dark, #1A2B48);
    margin-bottom: 0.75rem;
    line-height: 1.4;
  }
  .card-title a {
    text-decoration: none;
    color: inherit;
  }
  .card-title a:hover { color: var(--primary-color, #007bff); }

  .card-excerpt {
    font-size: 0.95rem;
    color: var(--text-medium, #4A5568);
    line-height: 1.6;
    margin-bottom: 1.5rem;
    flex-grow: 1;
  }

  .card-meta {
    font-size: 0.85rem;
    color: var(--text-light, #6c757d);
    margin-bottom: 0.75rem;
    border-top: 1px solid var(--border-color-soft, #e2e8f0);
    padding-top: 0.75rem;
    margin-top: auto;
  }
  .card-separator { margin: 0 0.5em; }

  .card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding-top: 0.5rem;
    border-top: 1px solid var(--border-color-soft, #e2e8f0);
  }
  .card-meta + .card-tags {
    border-top: none;
    padding-top: 0;
  }

  .card-tag {
    display: inline-block;
    background-color: var(--bg-light-gray, #f8f9fa);
    color: var(--text-light, #6c757d);
    padding: 0.2rem 0.6rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    text-decoration: none;
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  .card-tag:hover {
    background-color: var(--primary-color, #007bff);
    color: var(--white, #ffffff);
  }