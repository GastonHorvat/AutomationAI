---
// src/pages/blog/[slug].astro - VERSIÓN SUPABASE COMPLETA (SIN STYLES)
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';       // Importa cliente Supabase
import type { PostFromView } from '../../types';    // Importa el tipo desde types.ts
import ShareButtons from '../../components/blogSection/ShareButtons.astro'; // Importa el ShareButtons
import { Fragment } from 'astro/jsx-runtime';

// --- getStaticPaths: Obtiene slugs desde Supabase ---
export async function getStaticPaths() {
  console.log("--- BLOG [slug]: Running getStaticPaths from Supabase ---");
  type StaticPath = { params: { slug: string } };
  let paths: StaticPath[] = []; 

  if (!supabase) {
    console.error("Supabase client not initialized in [slug].astro getStaticPaths.");
    return paths;
  }

  try {
    const { data: posts, error } = await supabase
      .from('posts_view')      // Usamos la vista que ya filtra publicados
      .select('post_slug');    // Solo necesitamos el slug

    if (error) {
      throw new Error(`Supabase query error in getStaticPaths: ${error.message}`);
    }

    if (posts) {
      paths = posts
        .filter(post => post.post_slug) // Asegura que el slug no sea null o vacío
        .map((post) => ({
          params: { slug: post.post_slug },
          // No pasamos props, usaremos el slug para buscar
        }));
      console.log(`Generated ${paths.length} paths for blog posts from Supabase.`);
    }
  } catch (error: any) {
    console.error("Error in getStaticPaths (Supabase):", error);
    throw error; // Detener build si falla
  }

  return paths;
}

// --- Obtener Datos del Post Específico ---
const { slug } = Astro.params; // Obtenemos el slug de la URL
let post: PostFromView | null = null;
let fetchError: string | null = null;
let contentHtml = ''; // Variable para contenido procesado (opcional)

// Función compressHTML (Opcional, puedes quitarla si no la usas)
function compressHTML(html: string): string {
  if (!html) return '';
  // ... (Tu lógica de compresión si la mantienes) ...
  let compressed = html.replace(/>\s+</g, '><');
  return compressed;
}

// Fetch de datos del post actual
if (!supabase) {
   fetchError = "Supabase client not initialized.";
   console.error(fetchError);
} else if (!slug) {
   fetchError = "Slug parameter is missing.";
   console.error(fetchError);
} else {
  try {
    console.log(`Fetching post details for slug: ${slug}`);
    const { data, error } = await supabase
      .from('posts_view')      // Usamos la vista
      .select('*')             // Traemos todas las columnas de la vista
      .eq('post_slug', slug)   // Filtramos por el slug
      .maybeSingle();         // Esperamos un resultado (o null)

    if (error) throw error;

    if (data) {
      post = data as PostFromView;
      // Opcional: Pre-procesar contenido
      if(post.post_content) {
          contentHtml = compressHTML(post.post_content); // Llama a tu función si existe
          // O simplemente: contentHtml = post.post_content; si no comprimes
      }
      console.log(`Post found: ${post.post_title}`);
    } else {
      console.warn(`Post with slug "${slug}" not found.`);
      fetchError = `Post "${slug}" not found.`;
    }

  } catch (error: any) {
     console.error(`Error fetching post with slug ${slug}:`, error);
     fetchError = `Error fetching post: ${error.message}`;
  }
}

// Helper para formatear fechas
function formatDate(dateString: string | null): string {
    if (!dateString) return 'Unknown Date';
    try {
        const date = new Date(dateString);
        // Formato inglés consistente con tarjetas
        return date.toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
}
---

{/* --- INICIO HTML DEL COMPONENTE --- */}
<Layout title={`${post?.post_title || 'Blog Post'} | AutomationAI Blog`} description={post?.post_description || ''}>
  <article class="post-detail-article section-padding">
    <div class="container narrow-container">

      {/* Mostrar error si lo hubo al cargar */}
      {fetchError && !post && (
          <div class="error-loading-post" style="padding: 2rem; text-align: center; border: 1px solid red; background: #fff0f0; color: #a00;">
              <h2>Post Not Found or Error</h2>
              <p>{fetchError}</p>
              <a href="/blog/" style="display: inline-block; margin-top: 1rem; color: blue; text-decoration: underline;">Return to Blog</a>
          </div>
      )}

      {/* Mostrar contenido solo si el post existe */}
      {post && (
        <> {/* Fragment para agrupar */}
          <header class="post-header">
            {/* Categoría */}
            {post.category_name && post.category_slug && (
              <a href={`/blog/category/${post.category_slug}/`} class="post-category">
                {post.category_name}
              </a>
            )}
            {/* Título */}
            <h1 class="post-title">{post.post_title}</h1>
            {/* Meta Info */}
            <div class="post-meta">
              {post.author_name && <span>By {post.author_name}</span>}
              {post.author_name && post.published_at && <span class="separator"> | </span>}
              {post.published_at && (
                <time datetime={post.published_at}>
                  {formatDate(post.published_at)}
                </time>
              )}
              {/* Tiempo de Lectura */}
              {post.estimated_read_time && post.estimated_read_time > 0 && (
                  <>
                      <span class="separator"> | </span>
                      <span class="reading-time">{post.estimated_read_time} min read</span>
                  </>
              )}
            </div>
          </header>

          {/* Imagen Destacada */}
          {post.post_image_url && (
            <div class="post-featured-image">
              <img
                src={post.post_image_url}
                alt={`Featured image for ${post.post_title}`}
                loading="eager"
                decoding="async"
                width="800" 
                height="450"
              />
            </div>
          )}

          {/* Contenido Principal */}
          <div class="post-content prose" set:html={contentHtml || post.post_content || ''}>
          {/* Contenido se inyecta aquí */}
          </div>


          {/* Tags */}
          <footer class="post-footer">
            {post.tag_names && post.tag_names.length > 0 && post.tag_slugs && post.tag_slugs.length > 0 && (
              <div class="post-tags">
                <strong>Tags:</strong>
                {post.tag_names.map((tagName, index) => {
                    const tagSlug = post.tag_slugs![index]; // Asumimos sincronía
                    return (
                      <a href={`/blog/tag/${tagSlug}/`} class="tag-link">
                        {tagName}
                      </a>
                    );
                })}
              </div>
            )}
          </footer>
          {/* --- COMPONENTE SHARE BUTTONS AQUÍ --- */}
          <ShareButtons
            postUrl={`${Astro.url.origin}${Astro.url.pathname}`} 
            postTitle={post.post_title}
          />
        </>
      )}
    </div>
  </article>

</Layout>
{/* --- FIN HTML DEL COMPONENTE --- */}

<style is:global>

  /* Estilos para el menú desplegable */
  .dropdown-menu,
  [role="menu"],
  nav ul ul {
    padding-left: 0 !important;
    margin-left: 0 !important;
  }
  
  .dropdown-menu li,
  [role="menu"] li,
  nav ul ul li {
    padding-left: 0 !important;
    margin-left: 0 !important;
  }
  
  .dropdown-menu a,
  [role="menu"] a,
  nav ul ul a {
    padding-left: 15px !important;
    display: block !important;
  }

   /* Estilos la caja del artículo */
  .post-detail-article {
    margin: 1rem auto;
    max-width: 65%;
    padding: 2rem 1rem;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Estilos para las listas */
  .post-content ul, 
  .post-content ol,
  article ul,
  article ol {
    padding-left: 60px;
  }

  .post-content li,
  article li {
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  /* Estilos personalizados para <hr> */
  .post-content hr {
    margin-top: 2rem;
    margin-bottom: 0.5rem;
    border: none;
    border-top: 1px solid #ddd;
  }
 

</style>

<style>

 /* Estilos para la caja de tags */
  .post-tags {
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid #1920ff;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
  }
  
  .post-tags strong {
    font-weight: 600;
    margin-right: 0.5rem;
  }
  
  .tag-link {
    display: inline-block;
    background-color: #d6e6f5;
    color: #1a2b48;
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
    font-size: 0.85rem;
    text-decoration: none;
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  
  .tag-link:hover {
    background-color: #007bff;
    color: #ffffff;
  }
</style>