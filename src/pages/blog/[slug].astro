---
// src/pages/blog/[slug].astro - VERSIÓN OPTIMIZADA PARA HTML
import { Image } from 'astro:assets';
import Airtable from 'airtable';
// Eliminamos la importación de marked ya que no la necesitamos
import Layout from '../../layouts/Layout.astro';

function compressHTML(html: string): string {
  if (!html) return '';
  
  // 1. Elimina espacios entre etiquetas
  let compressed = html.replace(/>\s+</g, '><');
  
  // 2. Preserva saltos de línea dentro de <pre> y <code> (opcional)
  const codeBlocks: string[] = [];
  const preBlocks: string[] = [];
  
  // Guarda bloques de código para preservarlos
  compressed = compressed.replace(/<pre[^>]*>([\s\S]*?)<\/pre>/gi, (match) => {
    preBlocks.push(match);
    return `___PRE_BLOCK_${preBlocks.length - 1}___`;
  });
  
  compressed = compressed.replace(/<code[^>]*>([\s\S]*?)<\/code>/gi, (match) => {
    codeBlocks.push(match);
    return `___CODE_BLOCK_${codeBlocks.length - 1}___`;
  });
  
  // 3. Restaura los bloques preservados.
  preBlocks.forEach((block, i) => {
    compressed = compressed.replace(`___PRE_BLOCK_${i}___`, block);
  });
  
  codeBlocks.forEach((block, i) => {
    compressed = compressed.replace(`___CODE_BLOCK_${i}___`, block);
  });
  
  return compressed;
}

// 1. getStaticPaths: Define qué rutas generar en build time
export async function getStaticPaths() {
  // Define un tipo para los elementos de paths
  type PathItem = {
    params: { slug: string };
    props: { recordId: string };
  } | null;
  
  const base = new Airtable({ apiKey: import.meta.env.AIRTABLE_API_KEY }).base(import.meta.env.AIRTABLE_BASE_ID);
  const tableId = import.meta.env.AIRTABLE_BLOG_TABLE_ID || import.meta.env.AIRTABLE_TABLE_ID;
  let paths: PathItem[] = [];

  if (!import.meta.env.AIRTABLE_API_KEY || !import.meta.env.AIRTABLE_BASE_ID || !tableId) {
      return paths;
  }

  try {
    const records = await base(tableId).select({
      filterByFormula: "{Status} = 'Published'",
      fields: ["Slug", "Status"]
    }).all();
    
    paths = records.map((record) => {
      const slug = record.fields.Slug;
      if (!slug || typeof slug !== 'string') {
         return null;
      }
      return {
        params: { slug: slug },
        props: { recordId: record.id },
      };
    }).filter((path) => path !== null);
  } catch (error) {
    console.error("Error fetching paths from Airtable:", error);
  }
  
  return paths;
}

// 2. Recibimos el recordId pasado por getStaticPaths
const { recordId } = Astro.props;

// 3. Obtener post de Airtable
let post = null;
let contentHtml = '';

try {
  const base = new Airtable({ apiKey: import.meta.env.AIRTABLE_API_KEY }).base(import.meta.env.AIRTABLE_BASE_ID);
  const tableId = import.meta.env.AIRTABLE_BLOG_TABLE_ID || import.meta.env.AIRTABLE_TABLE_ID;
  
  const record = await base(tableId).find(recordId);
  
  if (record && record.fields) {
    // Helper para obtener valores string seguros
    const getStringValue = (field: string): string => {
      const value = record.fields[field];
      return value ? String(value) : '';
    };
    
    // Procesamos la fecha
    let publishDate = new Date();
    if (record.fields.PublishDate) {
      try {
        publishDate = new Date(String(record.fields.PublishDate));
      } catch (e) {
        // Usar fecha actual como fallback
      }
    }
    
    // Procesamos las imágenes
    let imageUrl = null;
    if (record.fields.Image && Array.isArray(record.fields.Image) && 
        record.fields.Image.length > 0 && typeof record.fields.Image[0] === 'object' &&
        record.fields.Image[0] !== null && 'url' in record.fields.Image[0]) {
      imageUrl = record.fields.Image[0].url;
    }
    
    // Procesamos tags
    const tags: string[] = [];
    if (record.fields.Tags && Array.isArray(record.fields.Tags)) {
      record.fields.Tags.forEach((tag) => {
        if (typeof tag === 'string') tags.push(tag);
      });
    }
    
    post = {
      id: record.id,
      Title: getStringValue('Title') || "Sin título",
      Content: getStringValue('Content') || "",
      Description: getStringValue('Description') || "",
      Author: getStringValue('Author') || "AutomationAI Team",
      PublishDate: publishDate,
      Category: getStringValue('Category') || "General",
      Tags: tags,
      Image: imageUrl,
      Status: getStringValue('Status') || "",
      Slug: getStringValue('Slug') || ""
    };
    
    // Ya no necesitamos marked, usamos el HTML directamente
    contentHtml = compressHTML(post.Content);
  }
} catch (error) {
  console.error(`Error fetching post with ID ${recordId}:`, error);
}

// Si no encontramos el post, redirigimos a 404
if (!post) {
  return Astro.redirect('/404');
}

// Helper para formatear fechas
function formatDate(date: Date): string {
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

// Tiempo estimado de lectura
function calculateReadingTime(content: string): number {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}

const readingTime = calculateReadingTime(post.Content);
---

<Layout title={`${post.Title} | AutomationAI Blog`} description={post.Description}>
  <article class="post-detail-article section-padding">
    <div class="container narrow-container">
      {/* Encabezado del Post */}
      <header class="post-header">
        {/* Categoría */}
        {post.Category && (
          <a href={`/blog/category/${post.Category.toLowerCase()}/`} class="post-category">
            {post.Category}
          </a>
        )}
        {/* Título */}
        <h1 class="post-title">{post.Title}</h1>
        {/* Meta Info */}
        <div class="post-meta">
          {post.Author && <span>By {post.Author}</span>}
          {post.Author && post.PublishDate && <span class="separator">|</span>}
          {post.PublishDate && (
            <time datetime={post.PublishDate.toISOString()}>
              {formatDate(post.PublishDate)}
            </time>
          )}
          <span class="separator">|</span>
          <span class="reading-time">{readingTime} min read</span>
        </div>
      </header>

      {/* Imagen Destacada (si existe) */}
      {post.Image && (
        <div class="post-featured-image">
          <img
            src={post.Image}
            alt={`Featured image for ${post.Title}`}
            loading="eager"
            decoding="async"
          />
        </div>
      )}

      {/* Contenido Principal del Post */}
      <div class="post-content prose">
        {/* Renderizamos el contenido HTML directamente */}
        <Fragment set:html={contentHtml} />
      </div>

      {/* Tags y Otros Metadatos (Footer del Post) */}
      <footer class="post-footer">
        {post.Tags && post.Tags.length > 0 && (
          <div class="post-tags">
            <strong>Tags:</strong>
            {post.Tags.map((tag) => (
              <a href={`/blog/tag/${tag.toLowerCase().replace(/\s+/g, '-')}/`} class="tag-link">
                {tag}
              </a>
            ))}
          </div>
        )}
      </footer>
    </div>
  </article>
</Layout>

<style is:global>

  /* Estilos para el menú desplegable */
  .dropdown-menu,
  [role="menu"],
  nav ul ul {
    padding-left: 0 !important;
    margin-left: 0 !important;
  }
  
  .dropdown-menu li,
  [role="menu"] li,
  nav ul ul li {
    padding-left: 0 !important;
    margin-left: 0 !important;
  }
  
  .dropdown-menu a,
  [role="menu"] a,
  nav ul ul a {
    padding-left: 15px !important;
    display: block !important;
  }

   /* Estilos la caja del artículo */
  .post-detail-article {
    margin: 1rem auto;
    max-width: 65%;
    padding: 2rem 1rem;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Estilos para las listas */
  .post-content ul, 
  .post-content ol,
  article ul,
  article ol,
  body ul,
  body ol {
    padding-left: 60px !important;
    margin-left: 0 !important;
  }

  .post-content li,
  article li,
  li {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }

  /* Estilos personalizados para <hr> */
  .post-content hr {
    margin-top: 2rem !important;
    margin-bottom: 0.5rem !important;
    border: none;
    border-top: 1px solid #ddd;
  }
 

</style>

<style>

 /* Estilos para la caja de tags */
  .post-tags {
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid #1920ff;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
  }
  
  .post-tags strong {
    font-weight: 600;
    margin-right: 0.5rem;
  }
  
  .tag-link {
    display: inline-block;
    background-color: #d6e6f5;
    color: #1a2b48;
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
    font-size: 0.85rem;
    text-decoration: none;
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  
  .tag-link:hover {
    background-color: #007bff;
    color: #ffffff;
  }
</style>