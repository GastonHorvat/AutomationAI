---
// src/pages/blog/[slug].astro - VERSIÓN ROBUSTA PARA RENDERIZADO MARKDOWN
import { Image } from 'astro:assets';
import Airtable from 'airtable';
import * as marked from 'marked'; // Importación completa de marked
import Layout from '../../layouts/Layout.astro';

// 1. getStaticPaths: Define qué rutas generar en build time
export async function getStaticPaths() {
  const base = new Airtable({ apiKey: import.meta.env.AIRTABLE_API_KEY }).base(import.meta.env.AIRTABLE_BASE_ID);
  const tableId = import.meta.env.AIRTABLE_BLOG_TABLE_ID || import.meta.env.AIRTABLE_TABLE_ID;
  let paths = [];

  if (!import.meta.env.AIRTABLE_API_KEY || !import.meta.env.AIRTABLE_BASE_ID || !tableId) {
      return paths;
  }

  try {
    const records = await base(tableId).select({
      filterByFormula: "{Status} = 'Published'",
      fields: ["Slug", "Status"]
    }).all();
    
    paths = records.map((record) => {
      const slug = record.fields.Slug;
      if (!slug || typeof slug !== 'string') {
         return null;
      }
      return {
        params: { slug: slug },
        props: { recordId: record.id },
      };
    }).filter((path) => path !== null);
  } catch (error) {
    console.error("Error fetching paths from Airtable:", error);
  }
  
  return paths;
}

// 2. Recibimos el recordId pasado por getStaticPaths
const { recordId } = Astro.props;

// 3. Obtener post de Airtable
let post = null;
let contentHtml = '';

try {
  const base = new Airtable({ apiKey: import.meta.env.AIRTABLE_API_KEY }).base(import.meta.env.AIRTABLE_BASE_ID);
  const tableId = import.meta.env.AIRTABLE_BLOG_TABLE_ID || import.meta.env.AIRTABLE_TABLE_ID;
  
  const record = await base(tableId).find(recordId);
  
  if (record && record.fields) {
    // Helper para obtener valores string seguros
    const getStringValue = (field) => {
      const value = record.fields[field];
      return value ? String(value) : '';
    };
    
    // Procesamos la fecha
    let publishDate = new Date();
    if (record.fields.PublishDate) {
      try {
        publishDate = new Date(String(record.fields.PublishDate));
      } catch (e) {
        // Usar fecha actual como fallback
      }
    }
    
    // Procesamos las imágenes
    let imageUrl = null;
    if (record.fields.Image && Array.isArray(record.fields.Image) && 
        record.fields.Image.length > 0 && typeof record.fields.Image[0] === 'object' &&
        record.fields.Image[0] !== null && 'url' in record.fields.Image[0]) {
      imageUrl = record.fields.Image[0].url;
    }
    
    // Procesamos tags
    const tags = [];
    if (record.fields.Tags && Array.isArray(record.fields.Tags)) {
      record.fields.Tags.forEach((tag) => {
        if (typeof tag === 'string') tags.push(tag);
      });
    }
    
    post = {
      id: record.id,
      Title: getStringValue('Title') || "Sin título",
      Content: getStringValue('Content') || "",
      Description: getStringValue('Description') || "",
      Author: getStringValue('Author') || "AutomationAI Team",
      PublishDate: publishDate,
      Category: getStringValue('Category') || "General",
      Tags: tags,
      Image: imageUrl,
      Status: getStringValue('Status') || "",
      Slug: getStringValue('Slug') || ""
    };
    
    // IMPORTANTE: Configuración robusta para renderizado Markdown
    marked.marked.setOptions({
      breaks: true,
      gfm: true,
      headerIds: true,
      mangle: false,
      smartLists: true,
      smartypants: true,
    });
    
    // Renderizar el contenido Markdown a HTML
    contentHtml = marked.marked.parse(post.Content);
  }
} catch (error) {
  console.error(`Error fetching post with ID ${recordId}:`, error);
}

// Si no encontramos el post, redirigimos a 404
if (!post) {
  return Astro.redirect('/404');
}

// Helper para formatear fechas
function formatDate(date) {
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

// Tiempo estimado de lectura
function calculateReadingTime(content) {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}

const readingTime = calculateReadingTime(post.Content);
---

<Layout title={`${post.Title} | AutomationAI Blog`} description={post.Description}>
  <article class="post-detail-article section-padding">
    <div class="container narrow-container">
      {/* Encabezado del Post */}
      <header class="post-header">
        {/* Categoría */}
        {post.Category && (
          <a href={`/blog/category/${post.Category.toLowerCase()}/`} class="post-category">
            {post.Category}
          </a>
        )}
        {/* Título */}
        <h1 class="post-title">{post.Title}</h1>
        {/* Meta Info */}
        <div class="post-meta">
          {post.Author && <span>By {post.Author}</span>}
          {post.Author && post.PublishDate && <span class="separator">|</span>}
          {post.PublishDate && (
            <time datetime={post.PublishDate.toISOString()}>
              {formatDate(post.PublishDate)}
            </time>
          )}
          <span class="separator">|</span>
          <span class="reading-time">{readingTime} min read</span>
        </div>
      </header>

      {/* Imagen Destacada (si existe) */}
      {post.Image && (
        <div class="post-featured-image">
          <img
            src={post.Image}
            alt={`Featured image for ${post.Title}`}
            loading="eager"
            decoding="async"
          />
        </div>
      )}

      {/* Contenido Principal del Post */}
      <div class="post-content prose">
        {/* Renderizamos el contenido HTML generado a partir del Markdown */}
        <Fragment set:html={contentHtml} />
      </div>

      {/* Tags y Otros Metadatos (Footer del Post) */}
      <footer class="post-footer">
        {post.Tags && post.Tags.length > 0 && (
          <div class="post-tags">
            <strong>Tags:</strong>
            {post.Tags.map((tag) => (
              <a href={`/blog/tag/${tag.toLowerCase().replace(/\s+/g, '-')}/`} class="tag-link">
                {tag}
              </a>
            ))}
          </div>
        )}
      </footer>
    </div>
  </article>
</Layout>

<style is:global>
  /* Estilos globales para el contenido Markdown renderizado */
  .post-content h1, 
  .post-content h2, 
  .post-content h3, 
  .post-content h4, 
  .post-content h5, 
  .post-content h6 {
    color: var(--text-dark, #1A2B48);
    font-weight: 700;
    line-height: 1.3;
    margin-top: .5rem;
    margin-bottom: 1rem;
  }
  
  .post-content h2 {
  font-size: 1.7rem;
  padding-bottom: 0.2rem;
  border-bottom: 1px solid #eee;
}
  
.post-content h3 {
  font-size: 1.4rem;
}

.post-content h4 {
  font-size: 1.2rem;
}

.post-content p {
  line-height: 1.7;
  color: var(--text-dark, #1A2B48);
}

  .post-content a {
    color: var(--primary-color, #007bff);
    text-decoration: underline;
  }
  
  .post-content a:hover {
    text-decoration: none;
  }
  
  .post-content strong {
    font-weight: 600;
  }
  
  .post-content em {
    font-style: italic;
  }
  
  .post-content ul, 
  .post-content ol {
    padding-left: 1.5rem;
  }


  .post-content code {
    background-color: rgba(0, 123, 255, 0.08);
    color: var(--text-dark, #1A2B48);
    padding: 0.2em 0.4em;
    border-radius: 4px;
    font-size: 0.9em;
    font-family: Consolas, Monaco, 'Andale Mono', monospace;
  }
  
  .post-content pre {
    background-color: #282c34;
    color: #abb2bf;
    padding: 1em;
    border-radius: 8px;
    overflow-x: auto;
    margin-bottom: 1.5em;
  }
  
  .post-content code {
    background: #f1f3f5;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-size: 0.9rem;
  }

  .post-content pre {
    background: #282c34;
    color: #f1f1f1;
    padding: 1rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .post-content blockquote {
    border-left: 3px solid var(--primary-color, #007bff);
    padding-left: 1rem;
    margin: 1.5rem 0;
    color: #555;
    font-style: italic;
    background: #f9f9f9;
  }

  .post-content img {
    margin: 1.5rem 0;
    border-radius: 6px;
    max-width: 100%;
    height: auto;
  }
  
  .post-content hr {
    margin: 2rem 0;
    border: none;
    border-top: 1px solid #ddd;
  }
  .post-content table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1.5em;
  }
  
  .post-content table th,
  .post-content table td {
    border: 1px solid #e2e8f0;
    padding: 0.5em;
  }
  
  .post-content table th {
    background-color: #f8f9fa;
    font-weight: 600;
  }
</style>

<style>
  .post-detail-article {
    background-color: var(--white, #ffffff);
  }

  .container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    box-sizing: border-box;
  }

  .section-padding {
    padding: 0.5rem 0;
  }

  .post-header {
    text-align: center;
    border-bottom: 1px solid var(--border-color-soft, #e2e8f0);
    padding-bottom: 1.5rem;
  }

  .post-category {
    display: inline-block;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--primary-color, #007bff);
    text-transform: uppercase;
    letter-spacing: 0.8px;
    text-decoration: none;
  }
  .post-category:hover {
    text-decoration: underline;
  }

  .post-title {
    font-size: clamp(2.2rem, 6vw, 3.5rem);
    color: var(--text-dark, #1A2B48);
    line-height: 1.2;
    margin-bottom: 1rem;
  }

  .post-meta {
    font-size: 0.95rem;
    color: var(--text-light, #6c757d);
  }

  .post-meta span,
  .post-meta time {
    display: inline; /* Asegura que se comporten en línea */
    margin-top: 0;
    margin-bottom: 0;
    vertical-align: middle; /* Ayuda a alinear si tienen tamaños de fuente distintos */
  }

  /* Opcional: Si quieres menos espacio alrededor de los separadores '|' */
  .post-meta .separator {
    margin: 0 0.3em; /* Reduce el espacio lateral */
  }

  .post-meta .separator {
    margin: 0 0.5em;
  }

  .post-featured-image {

    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.07);
  }
  .post-featured-image img {
    display: block;
    width: 100%;
    height: auto;
  }

  .post-content {
    font-size: 1.1rem;
    line-height: 1.8;
    color: var(--text-dark, #1A2B48);
  }

  .post-footer {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color-soft, #e2e8f0);
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.8rem;
    margin-bottom: 2rem;
  }
  .post-tags strong {
    font-weight: 600;
    color: var(--text-dark, #1A2B48);
    margin-right: 0.5rem;
  }
  .tag-link {
    display: inline-block;
    background-color: var(--bg-light-gray, #f8f9fa);
    color: var(--text-light, #6c757d);
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
    font-size: 0.85rem;
    font-weight: 500;
    text-decoration: none;
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  .tag-link:hover {
    background-color: var(--primary-color, #007bff);
    color: var(--white, #ffffff);
  }
</style>