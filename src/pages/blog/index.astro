---
// src/pages/blog/index.astro - VERSIÓN CON DOS COMPONENTES
import Layout from '../../layouts/Layout.astro';
// Importamos AMBOS componentes
import BlogPostCard from '../../components/blogSection/BlogPostCard.astro';
import FeaturedPostCard from '../../components/blogSection/FeaturedPostCard.astro'; // Nueva importación
import { supabase } from '../../lib/supabase';
import type { PostFromView } from '../../types';

// --- Inicialización ---
let featuredPost: PostFromView | null = null;
let regularPosts: PostFromView[] = [];
let fetchError: string | null = null;

// --- Fetch de Datos ---
if (!supabase) {
  fetchError = "Supabase client could not be initialized.";
  console.error(fetchError);
} else {
  try {
    console.log("Fetching featured and regular posts from Supabase view 'posts_view'");

    // 1. Obtener el Post Destacado (el primero que encuentre, si hay varios)
    const { data: featuredData, error: featuredError } = await supabase
      .from('posts_view')
      .select('*')
      .eq('is_featured', true) // Busca posts marcados como destacados
      .limit(1)               // Solo necesitamos uno
      .maybeSingle();         // Devuelve un solo objeto o null, no un array

    if (featuredError) {
      console.error("Error fetching featured post:", featuredError);
      // Podríamos decidir continuar sin post destacado o mostrar un error
      // fetchError = `Error fetching featured post: ${featuredError.message}`; // Opcional
    } else if (featuredData) {
      featuredPost = featuredData as PostFromView;
      console.log("Featured post found:", featuredPost.post_title);
    } else {
      console.log("No featured post found.");
    }

    // 2. Obtener Posts Regulares (todos los demás publicados)
    //    Excluimos el destacado si lo encontramos para no repetirlo.
    let query = supabase
      .from('posts_view')
      .select('*');

    if (featuredPost) {
      // Excluye el ID del post destacado si existe
      query = query.neq('post_id', featuredPost.post_id);
    }
    // Añadimos el filtro por si acaso (aunque la vista ya filtra por 'Published',
    // ser explícito con is_featured = false es más seguro)
    // También podríamos filtrar por `is_featured IS NULL` si usamos null por defecto
     query = query.or('is_featured.is.null,is_featured.eq.false') // Filtra no destacados o null


    const { data: regularData, error: regularError } = await query; // No aplicamos limit por ahora

    if (regularError) {
      throw regularError; // Si falla obtener los regulares, lanzamos error principal
    }

    if (regularData) {
      regularPosts = regularData as PostFromView[];
      console.log(`Regular posts found: ${regularPosts.length}`);
    }

  } catch (error: any) {
    console.error("Error fetching posts from Supabase:", error);
    fetchError = `Error fetching posts: ${error.message || 'Unknown error'}`;
    // Reseteamos por si acaso
    featuredPost = null;
    regularPosts = [];
  }
}

// --- Helpers (si no los tienes en un archivo separado) ---
function formatDate(dateString: string | null): string {
  if (!dateString) return 'Fecha desconocida';
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });
  } catch (e) { return 'Fecha inválida'; }
}

// Ya no necesitamos la función capitalize si los nombres vienen capitalizados de la DB

---

<Layout title="AutomationAI Blog | Insights & Tutorials" description="Explore the latest insights, tutorials, and success stories from AutomationAI Solutions on AI, automation, and business growth.">

  {/* --- Encabezado de la Página del Blog (Igual que antes) --- */}
  <section class="blog-hero section-padding bg-soft-gradient text-center">
    <div class="container">
      <h1 class="page-title">AutomationAI Insights</h1>
      <p class="page-subtitle">
        Your source for practical AI knowledge, automation tips, and business growth strategies.
      </p>
    </div>
  </section>

  {/* --- Mensaje de Error General --- */}
  {fetchError && (
    <div class="container section-padding">
      <div class="error-message" style="color: red; text-align: center; border: 1px solid red; padding: 1rem;">
        <h2>Error Loading Content</h2>
        <p>{fetchError}</p>
      </div>
    </div>
  )}

  {/* --- Sección Post Destacado --- */}
  {!fetchError && featuredPost && (
    <section class="featured-post-section section-padding">
      <div class="container">
        {/* *** USA EL NUEVO COMPONENTE *** */}
        <FeaturedPostCard post={featuredPost} />
      </div>
    </section>
  )}

  {/* --- Listado de Posts Regulares --- */}
  <section class="blog-list-section section-padding">
    <div class="container">
      {regularPosts.length > 0 ? (
        <div class="posts-grid">
          {regularPosts.map(post => { // El map no cambia
            return (
              // *** USA EL COMPONENTE SIMPLIFICADO ***
              <BlogPostCard post={post} />
            );
          })}
        </div>
      ) : (
        !fetchError && !featuredPost && (
          <div class="no-posts-message"> {/* ... */} </div>
        )
      )}
    </div>
  </section>

</Layout>

<style>
  /* --- Estilos Hero del Blog --- */
  .blog-hero {
    background: linear-gradient(180deg, var(--soft-gradient-start, #f8faff) 0%, var(--soft-gradient-end, #ffffff) 100%);
    padding: 4rem 0 3rem;
    margin-bottom: 2rem;
  }
  
  /* Contenedor para centrar contenido */
  .container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    box-sizing: border-box;
  }
  
  .section-padding {
    padding: 3rem 0;
  }
  
  .page-title {
    font-size: clamp(2.8rem, 7vw, 4rem);
    margin-bottom: 1rem;
    color: var(--text-dark, #1A2B48);
    font-weight: 700;
    text-align: center;
  }
  .page-subtitle {
    font-size: clamp(1.1rem, 3vw, 1.3rem);
    color: var(--text-medium, #4A5568);
    max-width: 650px;
    margin: 0 auto;
    line-height: 1.6;
    text-align: center;
  }

  /* --- Estilos Listado de Posts --- */
  .blog-list-section {
    background-color: var(--bg-light-gray, #f8f9fa);
    padding: 4rem 0;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2.5rem;
    margin: 0 auto;
  }

  @media (min-width: 640px) {
    .posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .posts-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
    }
  }

  /* --- Mensaje de No Posts --- */
  .no-posts-message {
    text-align: center;
    padding: 3rem 2rem;
    background-color: var(--white, #ffffff);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 50, 100, 0.05);
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
  }
  .no-posts-message h2 {
    font-size: 1.8rem;
    color: var(--text-dark, #1A2B48);
    margin-bottom: 1rem;
  }
  .no-posts-message p {
    color: var(--text-medium, #4A5568);
    max-width: 500px;
    margin: 0 auto 1.5rem;
  }

  
</style>