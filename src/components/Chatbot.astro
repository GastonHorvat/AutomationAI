---
// src/components/Chatbot.astro
import { Image } from 'astro:assets';
import chatbotIcon from '../assets/images/chatbot.png';

const webhookUrlFromEnv = import.meta.env.PUBLIC_MAKE_WEBHOOK_URL;
const chatbotTokenFromEnv = import.meta.env.PUBLIC_CHATBOT_SECRET_TOKEN;
---

<div
  id="chatbot-container"
  data-webhook-url={webhookUrlFromEnv}
  data-chatbot-token={chatbotTokenFromEnv}
>
  <button id="chatbot-toggle-button" aria-label="Abrir chat de NahIA">
    <Image src={chatbotIcon} alt="Abrir chat" width="48" height="48" />
  </button>

  <div id="chatbot-window" class="hidden">
    <header id="chatbot-header">
      <span id="chatbot-title">NahIA</span>
      <button id="chatbot-close-button" aria-label="Cerrar chat">×</button>
    </header>
    <div id="chatbot-messages">
      {/* Los mensajes se insertarán aquí por JS */}
    </div>
    <form id="chatbot-form">
      <input type="text" id="chatbot-input" placeholder="Escribe tu mensaje..." autocomplete="off" />
      <button type="submit" id="chatbot-send-button" aria-label="Enviar mensaje">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-send"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
      </button>
    </form>
  </div>
</div>

<script>
  // Importar DOMPurify. Si este script no se procesa como un módulo,
  // necesitarás cargar DOMPurify de otra manera (ej. CDN y acceso global)
  import DOMPurify from 'dompurify';

  // --- 1. OBTENCIÓN DE ELEMENTOS DOM ---
  const chatbotContainer = document.getElementById('chatbot-container') as HTMLDivElement | null;
  const chatbotToggleButton = document.getElementById('chatbot-toggle-button') as HTMLButtonElement | null;
  const chatbotWindow = document.getElementById('chatbot-window') as HTMLDivElement | null;
  const chatbotCloseButton = document.getElementById('chatbot-close-button') as HTMLButtonElement | null;
  const chatbotMessages = document.getElementById('chatbot-messages') as HTMLDivElement | null;
  const chatbotForm = document.getElementById('chatbot-form') as HTMLFormElement | null;
  const chatbotInput = document.getElementById('chatbot-input') as HTMLInputElement | null;

  // --- 2. CONSTANTES Y VARIABLES DE ESTADO GLOBALES DEL SCRIPT ---
  const WELCOME_MESSAGE_HTML = "<p>¡Hola! 👋 Soy NahIA. ¿Listo para descubrir cómo la IA puede transformar tu negocio? ¡Pregúntame lo que quieras!</p>";
  let isChatOpen = false;

  // --- 3. CONFIGURACIÓN Y LÓGICA DE SESIÓN/HISTORIAL/ESTADO ---
  const MAKE_WEBHOOK_URL = chatbotContainer?.dataset.webhookUrl || '';
  const CHATBOT_SECRET_TOKEN = chatbotContainer?.dataset.chatbotToken || '';
  const SESSION_ID_KEY = 'nahia_session_id';
  const CHAT_HISTORY_KEY_PREFIX = 'nahia_chat_history_';
  const CHAT_OPEN_STATE_KEY = 'nahia_chat_open_state';

  interface ChatMessage {
    content: string; // Ahora puede ser HTML para el bot, o texto para el usuario
    sender: 'user' | 'bot';
    timestamp: string;
  }

  function generateUUIDv4(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  function getChatHistoryKey(sessionId: string = currentSessionId): string {
    return CHAT_HISTORY_KEY_PREFIX + sessionId;
  }
  
  function getSessionId(): string {
    let sessionId = localStorage.getItem(SESSION_ID_KEY);
    if (!sessionId) {
      sessionId = generateUUIDv4();
      localStorage.setItem(SESSION_ID_KEY, sessionId);
      console.log('Nueva sessionId generada y guardada:', sessionId);
      localStorage.removeItem(getChatHistoryKey(sessionId));
      localStorage.setItem(CHAT_OPEN_STATE_KEY, 'false');
    }
    return sessionId;
  }
  
  let currentSessionId = getSessionId();
  console.log('Current sessionId al cargar:', currentSessionId);

  // --- 4. FUNCIONES DE MANEJO DE HISTORIAL EN LOCALSTORAGE ---
  function loadChatHistory(): ChatMessage[] {
    if (!chatbotMessages) return [];
    chatbotMessages.innerHTML = '';
    const historyKey = getChatHistoryKey();
    const storedHistory = localStorage.getItem(historyKey);
    if (storedHistory) {
      try {
        const messages: ChatMessage[] = JSON.parse(storedHistory);
        messages.forEach(msg => addMessageToChatDOM(msg.content, msg.sender));
        console.log(`Historial cargado para la sesión ${currentSessionId}:`, messages.length, "mensajes");
        return messages;
      } catch (e) {
        console.error('Error al parsear el historial del chat desde localStorage:', e);
        localStorage.removeItem(historyKey);
        return [];
      }
    }
    console.log(`No se encontró historial para la sesión ${currentSessionId}.`);
    return [];
  }

  function saveMessageToHistory(content: string, sender: 'user' | 'bot') {
    const historyKey = getChatHistoryKey();
    let messages: ChatMessage[] = [];
    const storedHistory = localStorage.getItem(historyKey);
    if (storedHistory) {
      try {
        messages = JSON.parse(storedHistory);
      } catch (e) {
        console.error('Error al parsear historial existente antes de guardar, se resetea:', e);
        messages = [];
      }
    }
    
    const newMessage: ChatMessage = { content, sender, timestamp: new Date().toISOString() };
    messages.push(newMessage);

    try {
      localStorage.setItem(historyKey, JSON.stringify(messages));
    } catch (e) {
      console.error('Error al guardar mensaje en localStorage (posiblemente lleno):', e);
    }
  }

  // --- 5. FUNCIONES PRINCIPALES DEL CHATBOT ---
  /**
   * Añade un mensaje (texto o HTML sanitizado para el bot) al DOM del chat.
   */
  function addMessageToChatDOM(content: string, sender: 'user' | 'bot' | 'bot-thinking'): HTMLDivElement | undefined {
    if (!chatbotMessages) return undefined;

    const messageElement = document.createElement('div');
    messageElement.classList.add('chatbot-message', `chatbot-message-${sender}`);
    
    const messageBubble = document.createElement('div'); // Sigue siendo un div
    messageBubble.classList.add('message-bubble-content'); // Clase para estilizar la burbuja en sí
    
    if (sender === 'bot') {
      messageBubble.innerHTML = DOMPurify.sanitize(content, { USE_PROFILES: { html: true } });
    } else if (sender === 'user') {
      // Para el usuario, el 'content' es texto plano. Lo ponemos directamente.
      // El div 'messageBubble' ya tendrá padding y estilos de burbuja.
      // Si quieres que el texto del usuario siempre esté dentro de un <p> por consistencia con el bot,
      // podrías hacer: messageBubble.innerHTML = `<p>${DOMPurify.sanitize(content, { USE_PROFILES: { html: false } })}</p>`;
      // pero usar textContent es más simple si no necesitas un <p> explícito para el usuario.
      // Vamos a mantener la creación de un <p> para el usuario para que los estilos de "burbuja"
      // se apliquen consistentemente al <p>
      const p = document.createElement('p');
      p.textContent = content;
      messageBubble.appendChild(p); // El <p> del usuario sigue igual
    } else { // bot-thinking
      const p = document.createElement('p');
      p.textContent = content;
      messageBubble.appendChild(p);
    }
    
    messageElement.appendChild(messageBubble);
    chatbotMessages.appendChild(messageElement);
    chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    return messageElement;
  }

  function setChatOpenState(open: boolean, isInitialLoad = false) {
    if (!chatbotWindow || !chatbotToggleButton || !chatbotInput) return;

    isChatOpen = open;
    chatbotWindow.classList.toggle('hidden', !open);
    chatbotToggleButton.setAttribute('aria-expanded', String(open));
    
    if (!isInitialLoad) {
        localStorage.setItem(CHAT_OPEN_STATE_KEY, String(open));
    }

    if (open) {
      const loadedMessages = loadChatHistory();
      if (loadedMessages.length === 0) {
        // El mensaje de bienvenida ahora es HTML
        addMessageToChatDOM(WELCOME_MESSAGE_HTML, 'bot');
        saveMessageToHistory(WELCOME_MESSAGE_HTML, 'bot');
      }
      chatbotInput.focus();
    }
    console.log(`Chat window state set to: ${open ? 'open' : 'closed'}. Initial load: ${isInitialLoad}`);
  }

  function toggleChatWindow() {
    setChatOpenState(!isChatOpen); 
  }

  async function handleSendMessage(event: Event) {
    event.preventDefault();
    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;

    if (!MAKE_WEBHOOK_URL || !CHATBOT_SECRET_TOKEN) {
      console.error("Chatbot Config Error: Webhook URL o Token no definido.");
      addMessageToChatDOM("<p>Error de configuración. No se puede contactar a NahIA.</p>", 'bot');
      return;
    }
    if (!chatbotInput || chatbotInput.value.trim() === '') {
      if (!chatbotInput) console.error("Chatbot Error: Input no encontrado.");
      return;
    }

    const userMessageText = chatbotInput.value.trim(); // El mensaje del usuario es siempre texto plano
    addMessageToChatDOM(userMessageText, 'user');
    saveMessageToHistory(userMessageText, 'user'); // Guardar como texto

    const currentMessageValue = chatbotInput.value;
    if(chatbotInput) chatbotInput.value = '';

    const thinkingMessage = addMessageToChatDOM("NahIA está pensando...", 'bot-thinking');

    try {
      const response = await fetch(MAKE_WEBHOOK_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          timestamp: new Date().toISOString(),
          userTimezone: userTimezone,
          source: 'NahIA Chatbot',
          userMessage: userMessageText, // Enviar el texto plano del usuario
          sessionId: currentSessionId,
          chatbot_token: CHATBOT_SECRET_TOKEN
        }),
      });

      if (thinkingMessage && thinkingMessage.parentElement === chatbotMessages && chatbotMessages) {
          chatbotMessages.removeChild(thinkingMessage);
      }

      if (!response.ok) {
        // ... (manejo de errores similar, pero ahora los mensajes de error del bot también pueden ser HTML simple)
        let errorDetail = `Status: ${response.status}`;
        try { const errorBodyText = await response.text(); if (errorBodyText) errorDetail += ` - ${errorBodyText.substring(0, 200)}`; } catch (e) { /* Ignorar */ }
        console.error('Error desde Make.com:', errorDetail);
        const displayError = response.status === 401 || response.status === 403
          ? `<p>Error de autenticación con NahIA. Verifique la configuración.</p>`
          : `<p>Hubo un problema con NahIA. (Error: ${response.status})</p>`;
        addMessageToChatDOM(displayError, 'bot');
        if(chatbotInput) chatbotInput.value = currentMessageValue;
        return;
      }

      const responseText = await response.text(); // Obtener como texto primero
      let data;
      try {
        data = JSON.parse(responseText); // Intentar parsear como JSON
      } catch (e) {
        console.error('Error al parsear respuesta JSON de Make.com:', e, "\nRespuesta recibida:", responseText.substring(0, 500));
        addMessageToChatDOM("<p>NahIA envió una respuesta en un formato inesperado. Intenta de nuevo.</p>", 'bot');
        return;
      }
      

      if (data && data.botResponse && typeof data.botResponse === 'string') {
        // botResponse ahora es un string HTML
        addMessageToChatDOM(data.botResponse, 'bot');
        saveMessageToHistory(data.botResponse, 'bot'); // Guardar el HTML en el historial
      } else {
        console.error('Respuesta OK, pero sin data.botResponse (string HTML) esperado:', data);
        addMessageToChatDOM('<p>NahIA tuvo un pequeño desliz al responder. Intenta de nuevo.</p>', 'bot');
      }

    } catch (error) {
       if (thinkingMessage && thinkingMessage.parentElement === chatbotMessages && chatbotMessages) {
          chatbotMessages.removeChild(thinkingMessage);
      }
      let errorMessage = '<p>Error de conexión con NahIA. Intenta de nuevo más tarde.</p>';
      if (error instanceof Error) {
          errorMessage = `<p>Error al procesar la respuesta de NahIA: ${error.message.substring(0, 100)}</p>`;
      }
      console.error('Catch block error en handleSendMessage:', error);
      addMessageToChatDOM(errorMessage, 'bot');
      if(chatbotInput) chatbotInput.value = currentMessageValue;
    }
  }

  // --- 6. ASIGNACIÓN DE EVENT LISTENERS E INICIALIZACIÓN ---
  document.addEventListener('DOMContentLoaded', () => {
    
    currentSessionId = getSessionId(); 

    const savedOpenState = localStorage.getItem(CHAT_OPEN_STATE_KEY);
    const shouldBeOpen = savedOpenState === 'true'; 
    
    setChatOpenState(shouldBeOpen, true);

    if (chatbotToggleButton) {
      chatbotToggleButton.addEventListener('click', toggleChatWindow);
    }
    if (chatbotCloseButton) {
      chatbotCloseButton.addEventListener('click', toggleChatWindow);
    }
    if (chatbotForm) {
      chatbotForm.addEventListener('submit', handleSendMessage);
    }
    console.log('Event listeners adjuntados y script de chatbot inicializado.');
  });
</script>

<style is:global>
  :root {
    --chatbot-primary-color: var(--primary-color, #0052cc);
    --chatbot-secondary-color: var(--secondary-color, #DE350B);
    --chatbot-text-color: #333;
    --chatbot-bg-light: #ffffff;
    --chatbot-bg-user-message: #e6f2ff;
    --chatbot-bg-bot-message: #f0f0f0;
    --chatbot-border-color: #e0e0e0;
    --chatbot-header-text-color: #ffffff !important;
  }

  #chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
  }

  #chatbot-toggle-button {
    background-color: var(--chatbot-primary-color);
    color: white;
    border: none;
    border-radius: 50%;
    width: 72px;
    height: 72px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }

  #chatbot-toggle-button:hover {
    transform: scale(1.08);
    box-shadow: 0 6px 14px rgba(0, 0, 0, 0.35);
  }

  #chatbot-toggle-button img {
    width: 48px;
    height: 48px;
    object-fit: contain;
    filter: brightness(0) invert(1);
  }

  #chatbot-window {
    background-color: var(--chatbot-bg-light);
    border: 1px solid var(--chatbot-border-color);
    border-radius: 10px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.4);
    width: 90vw;
    max-width: 450px;
    max-height: 80vh; 
    display: flex;
    flex-direction: column;
    position: absolute; 
    bottom: 95px; /* Ajustado ligeramente por si el botón es de 72px + ~20px de espacio */
    right: 0;
    overflow: hidden; 
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  #chatbot-window.hidden {
    display: none;
  }

  #chatbot-header {
    background-color: var(--chatbot-primary-color);
    color: var(--chatbot-header-text-color, #ffffff);
    padding: 14px 18px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top-left-radius: 10px; 
    border-top-right-radius: 10px;
  }

  #chatbot-title { 
    font-size: 1.2em; 
    font-weight: 600; 
    margin-right: 10px;
    white-space: normal; 
    overflow: visible;
    text-overflow: clip;
  }

  #chatbot-close-button {
    background: none;
    border: none;
    color: inherit;
    font-size: 1.9em;
    line-height: 1;
    cursor: pointer;
    padding: 0 5px;
    flex-shrink: 0;
  }

  #chatbot-messages {
    flex-grow: 1;
    padding: 15px; /* Padding para el contenedor general de mensajes */
    overflow-y: auto;
    min-height: 200px;
    max-height: calc(80vh - 120px); /* Ajusta según header y form */
    background-color: #f9f9f9;
  }

  /* Contenedor de cada mensaje individual (user o bot) */
  #chatbot-messages .chatbot-message {
    margin-bottom: 12px;
    display: flex; /* Para permitir alinear la burbuja a la izq/der */
    width: 100%;
  }

  /* La burbuja de contenido (el div .message-bubble-content) */
  #chatbot-messages .chatbot-message .message-bubble-content {
    padding: 10px 14px; /* Padding DENTRO de la burbuja */
    border-radius: 18px;
    max-width: 80%; /* Máximo ancho de la burbuja */
    line-height: 1.4;
    overflow-wrap: break-word; /* Para que el texto largo se rompa */
    display: inline-block; /* Para que se ajuste al contenido pero respete max-width */
    text-align: left; /* Texto dentro de la burbuja alineado a la izquierda por defecto */
  }

  /* Estilos para los <p> que vienen DENTRO del HTML del bot */
  .chatbot-message-bot .message-bubble-content p {
    margin-top: 0.6em;  /* Espacio entre párrafos del bot */
    margin-bottom: 0.6em; /* Espacio entre párrafos del bot */
  }
  /* Quitar margen superior del primer párrafo del bot y margen inferior del último */
  .chatbot-message-bot .message-bubble-content p:first-child {
    margin-top: 0;
  }
  .chatbot-message-bot .message-bubble-content p:last-child {
    margin-bottom: 0;
  }

  /* --- NUEVO: Estilos para listas <ul> y <li> dentro del contenido del bot --- */
.chatbot-message-bot .message-bubble-content ul,
.chatbot-message-bot .message-bubble-content ol { /* Aplicar también a listas ordenadas si las usas */
  margin-top: 0.6em;    /* Margen superior para la lista completa */
  margin-bottom: 0.6em; /* Margen inferior para la lista completa */
  padding-left: 20px; /* <<--- ESTO ES CLAVE: Añade padding a la izquierda para los bullets/números */
                      /* Ajusta este valor (20px) según cuánto quieres que se tabulen */
}
  
  /* Estilos para el <p> que creamos para el mensaje del usuario y "pensando"
     (si en tu JS sigues envolviendo el texto del usuario en un <p>) */
  .chatbot-message-user .message-bubble-content p,
  .chatbot-message-bot-thinking .message-bubble-content p {
    margin: 0; /* Los <p> del usuario y "pensando" no necesitan márgenes internos ya que son una sola línea */
  }

  /* Alineación y estilos de fondo para mensajes de USUARIO */
  .chatbot-message-user {
    justify-content: flex-end; /* Alinea la burbuja del usuario a la derecha */
  }
  .chatbot-message-user .message-bubble-content {
    background-color: var(--chatbot-bg-user-message);
    color: var(--chatbot-text-color);
    border-bottom-right-radius: 4px; /* Esquina para estilo "burbuja" */
  }

  /* Alineación y estilos de fondo para mensajes de BOT */
  .chatbot-message-bot {
    justify-content: flex-start; /* Alinea la burbuja del bot a la izquierda */
  }
  .chatbot-message-bot .message-bubble-content {
    background-color: var(--chatbot-bg-bot-message);
    color: var(--chatbot-text-color);
    border-bottom-left-radius: 4px; /* Esquina para estilo "burbuja" */
  }

  /* Estilos para el mensaje de "pensando..." */
  .chatbot-message-bot-thinking { /* Asegurar que también se alinee a la izquierda */
     justify-content: flex-start;
  }
  .chatbot-message-bot-thinking .message-bubble-content {
    background-color: var(--chatbot-bg-bot-message);
    color: #777;
    font-style: italic;
    border-bottom-left-radius: 4px;
  }


  #chatbot-form {
    display: flex;
    padding: 10px 15px;
    border-top: 1px solid var(--chatbot-border-color);
    background-color: var(--chatbot-bg-light);
  }

  #chatbot-input {
    flex-grow: 1;
    border: 1px solid #ccc;
    border-radius: 20px;
    padding: 10px 15px;
    margin-right: 10px;
    font-size: 0.95em;
    outline: none;
  }
  #chatbot-input:focus {
    border-color: var(--chatbot-primary-color);
    box-shadow: 0 0 0 2px var(--chatbot-primary-color, #0052cc)33;
  }

  #chatbot-send-button {
    background-color: var(--chatbot-primary-color);
    color: white;
    border: none;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    flex-shrink: 0;
  }
  #chatbot-send-button:hover {
    opacity: 0.9;
  }
  #chatbot-send-button svg {
    width: 20px;
    height: 20px;
  }

  /* Media query para pantallas más pequeñas (ej. móviles) */
  @media (max-width: 480px) {
    #chatbot-window {
      width: calc(100vw - 30px); 
      max-width: 95%;
      bottom: 85px; /* Ajustado por botón de 72px */
      right: 5px; 
      left: auto;
    }

    #chatbot-window:not(.hidden) {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      max-width: none;
      max-height: none;
      border-radius: 0;
      z-index: 2000;
    }

    #chatbot-window:not(.hidden) #chatbot-messages {
      max-height: calc(100vh - 110px); 
    }
    
    #chatbot-toggle-button {
      width: 64px; 
      height: 64px;
      bottom: 15px; /* Pegado más abajo y a la derecha en móviles */
      right: 15px;
      z-index: 2001; /* Encima de la ventana del chat cuando está full screen */
    }
    #chatbot-toggle-button img {
      width: 40px; 
      height: 40px;
    }
  }
</style>